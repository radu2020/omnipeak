[
    {
        "id": "133de825945e588f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6563c5e0fbec9bce",
        "type": "group",
        "z": "133de825945e588f",
        "name": "Read Logs",
        "style": {
            "label": true,
            "fill": "#bfdbef",
            "color": "#000000"
        },
        "nodes": [
            "e8a6a3c1b282b5e6",
            "9ae470db9dbe4d97"
        ],
        "x": 294,
        "y": 139,
        "w": 252,
        "h": 122
    },
    {
        "id": "7e061718650f8a60",
        "type": "group",
        "z": "133de825945e588f",
        "name": "Fetch Data",
        "style": {
            "label": true,
            "fill": "#ffffbf",
            "color": "#000000"
        },
        "nodes": [
            "541adf6cb0cb6d86",
            "008232c0c6f37d2b"
        ],
        "x": 574,
        "y": 139,
        "w": 212,
        "h": 122
    },
    {
        "id": "585e4f5e68efc25e",
        "type": "group",
        "z": "133de825945e588f",
        "name": "Extract Data",
        "style": {
            "label": true,
            "fill": "#ffefbf",
            "color": "#000000"
        },
        "nodes": [
            "a832abe70435a383",
            "c014e2555ad2e744",
            "7cae582114d30567"
        ],
        "x": 814,
        "y": 139,
        "w": 232,
        "h": 162
    },
    {
        "id": "1c986a9373a08701",
        "type": "group",
        "z": "133de825945e588f",
        "name": "Email Check",
        "style": {
            "label": true,
            "fill": "#ffbfbf",
            "color": "#000000"
        },
        "nodes": [
            "61a3aea1b6c08877",
            "6d9bd22592923063",
            "c1b2a4a39a37e4f5",
            "6ae77e6f5770d4e4",
            "6af275cd19a1950d"
        ],
        "x": 1074,
        "y": 139,
        "w": 252,
        "h": 242
    },
    {
        "id": "18e3523e5757c585",
        "type": "group",
        "z": "133de825945e588f",
        "name": "Send Email",
        "style": {
            "fill": "#e3f3d3",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "149c0c836635e2a0",
            "f407817f9c514a3c",
            "74be03a9d8c1f56d",
            "87cf2f8dc9df7de7",
            "7d4ed0ed1d65501b",
            "c36b8eec6c1d8799",
            "dbad3af65300de0e"
        ],
        "x": 1354,
        "y": 139,
        "w": 432,
        "h": 242
    },
    {
        "id": "008232c0c6f37d2b",
        "type": "http request",
        "z": "133de825945e588f",
        "g": "7e061718650f8a60",
        "name": "GET Contacts",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.hubapi.com/crm/v3/objects/contacts?properties=email,firstname,lastname,industry",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "a832abe70435a383"
            ]
        ]
    },
    {
        "id": "541adf6cb0cb6d86",
        "type": "function",
        "z": "133de825945e588f",
        "g": "7e061718650f8a60",
        "name": "Set Auth Header",
        "func": "msg.headers = {\n    \"Authorization\": \"Bearer \" + env.get(\"HUBSPOT_API_KEY\"),\n    \"Content-Type\": \"application/json\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 180,
        "wires": [
            [
                "008232c0c6f37d2b"
            ]
        ]
    },
    {
        "id": "a832abe70435a383",
        "type": "json",
        "z": "133de825945e588f",
        "g": "585e4f5e68efc25e",
        "name": "Unmarshal Data",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 920,
        "y": 180,
        "wires": [
            [
                "c014e2555ad2e744"
            ]
        ]
    },
    {
        "id": "c014e2555ad2e744",
        "type": "function",
        "z": "133de825945e588f",
        "g": "585e4f5e68efc25e",
        "name": "Extract Contacts",
        "func": "const contacts = msg.payload.results.map(c => {\n    return {\n        email: c.properties.email,\n        firstname: c.properties.firstname,\n        lastname: c.properties.lastname,\n        industry: c.properties.industry\n    };\n});\nmsg.payload = contacts;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 220,
        "wires": [
            [
                "7cae582114d30567"
            ]
        ]
    },
    {
        "id": "7cae582114d30567",
        "type": "function",
        "z": "133de825945e588f",
        "g": "585e4f5e68efc25e",
        "name": "Filter Contacts",
        "func": "msg.payload = msg.payload.filter(c =>\n    c.industry && c.industry.toLowerCase().includes(\"technology\")\n);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "61a3aea1b6c08877"
            ]
        ]
    },
    {
        "id": "149c0c836635e2a0",
        "type": "function",
        "z": "133de825945e588f",
        "g": "18e3523e5757c585",
        "name": "Compose Email",
        "func": "msg.headers[\"content-type\"] = \"text/plain; charset=utf-8\"\nmsg.to = msg.payload.email;\nmsg.topic = \"Thanks for connecting!\";\nmsg.payload = `Hi ${msg.payload.firstname},\\n\\nThanks for being a valued contact in the ${msg.payload.industry} sector.`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 180,
        "wires": [
            [
                "f407817f9c514a3c",
                "7d4ed0ed1d65501b",
                "74be03a9d8c1f56d"
            ]
        ]
    },
    {
        "id": "f407817f9c514a3c",
        "type": "e-mail",
        "z": "133de825945e588f",
        "g": "18e3523e5757c585",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "🚀 Send Email",
        "x": 1660,
        "y": 180,
        "wires": []
    },
    {
        "id": "dbad3af65300de0e",
        "type": "catch",
        "z": "133de825945e588f",
        "g": "18e3523e5757c585",
        "name": "Catch All Errors",
        "scope": null,
        "uncaught": false,
        "x": 1460,
        "y": 340,
        "wires": [
            [
                "c36b8eec6c1d8799"
            ]
        ]
    },
    {
        "id": "61a3aea1b6c08877",
        "type": "split",
        "z": "133de825945e588f",
        "g": "1c986a9373a08701",
        "name": "Split Contacts",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1180,
        "y": 180,
        "wires": [
            [
                "6d9bd22592923063"
            ]
        ]
    },
    {
        "id": "b0a2f714ad71c9ad",
        "type": "inject",
        "z": "133de825945e588f",
        "name": "Start Process",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "e8a6a3c1b282b5e6"
            ]
        ]
    },
    {
        "id": "e8a6a3c1b282b5e6",
        "type": "file in",
        "z": "133de825945e588f",
        "g": "6563c5e0fbec9bce",
        "name": "Read Log File",
        "filename": "/Users/radu/Code/tmp/data/email_log.jsonl",
        "filenameType": "str",
        "format": "utf8",
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 400,
        "y": 180,
        "wires": [
            [
                "9ae470db9dbe4d97"
            ]
        ]
    },
    {
        "id": "9ae470db9dbe4d97",
        "type": "function",
        "z": "133de825945e588f",
        "g": "6563c5e0fbec9bce",
        "name": "Store in flow.emailLog",
        "func": "// Parse JSON lines\nconst lines = msg.payload.split(\"\\n\").filter(line => line);\nconst logEntries = lines.map(line => {\n    try {\n        return JSON.parse(line);\n    } catch (err) {\n        return null;\n    }\n}).filter(e => e && e.recipient);\n\nflow.set(\"emailLog\", logEntries);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "541adf6cb0cb6d86"
            ]
        ]
    },
    {
        "id": "6d9bd22592923063",
        "type": "function",
        "z": "133de825945e588f",
        "g": "1c986a9373a08701",
        "name": "Filter by Last Sent",
        "func": "const contact = msg.payload;\nconst log = flow.get(\"emailLog\") || [];\nconst now = Date.now();\nconst cutoff = 24 * 60 * 60 * 1000;\n\nconst previous = log.find(entry => entry.recipient === contact.email);\n\nmsg.payload = contact;\nmsg.shouldSend = (!previous || now - previous.timestamp > cutoff);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1190,
        "y": 220,
        "wires": [
            [
                "c1b2a4a39a37e4f5",
                "6ae77e6f5770d4e4"
            ]
        ]
    },
    {
        "id": "c1b2a4a39a37e4f5",
        "type": "switch",
        "z": "133de825945e588f",
        "g": "1c986a9373a08701",
        "name": "Send?",
        "property": "shouldSend",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 260,
        "wires": [
            [
                "149c0c836635e2a0"
            ]
        ]
    },
    {
        "id": "74be03a9d8c1f56d",
        "type": "function",
        "z": "133de825945e588f",
        "g": "18e3523e5757c585",
        "name": "Log New Send",
        "func": "const log = {\n    timestamp: Date.now(),\n    recipient: msg.to\n};\nmsg.payload = JSON.stringify(log);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 220,
        "wires": [
            [
                "87cf2f8dc9df7de7"
            ]
        ]
    },
    {
        "id": "87cf2f8dc9df7de7",
        "type": "file",
        "z": "133de825945e588f",
        "g": "18e3523e5757c585",
        "name": "Append to Log File",
        "filename": "/Users/radu/Code/tmp/data/email_log.jsonl",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1470,
        "y": 260,
        "wires": [
            [
                "c36b8eec6c1d8799"
            ]
        ]
    },
    {
        "id": "7d4ed0ed1d65501b",
        "type": "debug",
        "z": "133de825945e588f",
        "g": "18e3523e5757c585",
        "name": "✅ Email Sent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "to",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 220,
        "wires": []
    },
    {
        "id": "c36b8eec6c1d8799",
        "type": "debug",
        "z": "133de825945e588f",
        "g": "18e3523e5757c585",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 300,
        "wires": []
    },
    {
        "id": "6ae77e6f5770d4e4",
        "type": "switch",
        "z": "133de825945e588f",
        "g": "1c986a9373a08701",
        "name": "Not Sent?",
        "property": "shouldSend",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1160,
        "y": 300,
        "wires": [
            [
                "6af275cd19a1950d"
            ]
        ]
    },
    {
        "id": "6af275cd19a1950d",
        "type": "debug",
        "z": "133de825945e588f",
        "g": "1c986a9373a08701",
        "name": "❌ Email Not Sent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.email",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 340,
        "wires": []
    }
]